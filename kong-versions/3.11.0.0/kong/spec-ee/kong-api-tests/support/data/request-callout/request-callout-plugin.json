{
	"testPluginCreateErrorSuite": [
		{
			"scenarioName": "without callout",
			"pluginConfig": {
				"callouts": []
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"name": "schema violation",
					"message": "schema violation (config.callouts: at least one callout is required)",
					"fields": {
						"config": {
							"callouts": "at least one callout is required"
						}
					},
					"code": 2
				}
			}
		},
		{
			"scenarioName": "without callout.name",
			"pluginConfig": {
				"callouts": [
					{
						"name": null,
						"request": {
							"url": "http://httpbin/anything"
						}
					}
				]
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"name": "schema violation",
					"message": "schema violation (config.callouts: {\n  {\n    name = \"required field missing\"\n  }\n})",
					"fields": {
						"config": {
							"callouts": [
								{
									"name": "required field missing"
								}
							]
						}
					},
					"code": 2
				}
			}
		},
		{
			"scenarioName": "without callout.url",
			"pluginConfig": {
				"callouts": [
					{
						"name": "c1",
						"request": {
							"url": null
						}
					}
				]
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"name": "schema violation",
					"message": "schema violation (config.callouts: {\n  {\n    request = {\n      url = \"required field missing\"\n    }\n  }\n})",
					"fields": {
						"config": {
							"callouts": [
								{
									"request": {
										"url": "required field missing"
									}
								}
							]
						}
					},
					"code": 2
				}
			}
		}
	],
	"dependecies": {
		"pluginConfig": {
			"callouts": [
				{
					"name": "callout1",
					"request": {
						"url": "http://httpbin/anything"
					}
				}
			]
		},
		"pluginConfig_res": {
			"statusCode": 201,
			"body": {
				"tags": null,
				"protocols": [
					"grpc",
					"grpcs",
					"http",
					"https"
				],
				"consumer": null,
				"config": {
					"upstream": {
						"query": {
							"custom": null,
							"forward": true
						},
						"body": {
							"decode": true,
							"custom": null,
							"forward": true
						},
						"by_lua": null,
						"headers": {
							"custom": null,
							"forward": true
						}
					},
					"cache": {
						"redis": {
							"sentinel_role": null,
							"server_name": null,
							"connect_timeout": 2000,
							"send_timeout": 2000,
							"read_timeout": 2000,
							"sentinel_addresses": null,
							"timeout": 2000,
							"sentinel_master": null,
							"password": null,
							"host": "127.0.0.1",
							"cluster_addresses": null,
							"username": null,
							"database": 0,
							"cluster_max_redirections": 5,
							"port": 6379,
							"connection_is_proxied": false,
							"keepalive_backlog": null,
							"keepalive_pool_size": 256,
							"ssl_verify": false,
							"sentinel_username": null,
							"ssl": false,
							"sentinel_password": null,
							"sentinel_nodes": null,
							"cluster_nodes": null
						},
						"cache_ttl": 300,
						"strategy": "off",
						"memory": {
							"dictionary_name": "kong_db_cache"
						}
					},
					"callouts": [
						{
							"depends_on": [],
							"name": "callout1",
							"response": {
								"body": {
									"decode": false,
									"store": true
								},
								"by_lua": null,
								"headers": {
									"store": true
								}
							},
							"cache": {
								"bypass": false
							},
							"request": {
								"http_opts": {
									"proxy": null,
									"timeouts": null,
									"ssl_verify": false,
									"ssl_server_name": null
								},
								"error": {
									"on_error": "fail",
									"retries": 2,
									"http_statuses": null,
									"error_response_msg": "service callout error",
									"error_response_code": 400
								},
								"headers": {
									"custom": null,
									"forward": false
								},
								"method": "GET",
								"body": {
									"decode": false,
									"custom": null,
									"forward": false
								},
								"by_lua": null,
								"query": {
									"custom": null,
									"forward": false
								},
								"url": "http://httpbin/anything"
							}
						}
					]
				},
				"partials": null,
				"route": null,
				"enabled": true,
				"name": "request-callout",
				"service": null,
				"ordering": null,
				"consumer_group": null,
				"instance_name": null
			}
		},
		"request": {
			"method": "GET",
			"url": "<plache_holder>",
			"validateStatus": null
		},
		"logs": {
			"message1": "requesting callout callout1: http:\\/\\/httpbin\\/anything",
			"message2": "callout callout1 responded with code 200 in \\d+ms."
		},
		"res": {
			"statusCode": 200,
			"body": {
				"headers": {
					"Callout-Body-Type": "string",
					"Callout-Status": "200"
				}
			}
		}
	},
	"testPluginUpdateErrorSuite": [
		{
			"scenarioName": "circular dependency",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"depends_on": [
							"callout2"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"headers": {
								"custom": {
									"H1-C2-Method": "$(callouts.callout2.response.body.method)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout2",
						"depends_on": [
							"callout3"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout3",
						"depends_on": [
							"callout1"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "PUT",
							"headers": {
								"custom": {
									"H3-C1-Method": "$(callouts.callout1.response.body.method)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespStatus-Callout2": "$(callouts.callout2.response.status)",
							"ShowRespStatus-Callout3": "$(callouts.callout3.response.status)",
							"ShowRespHeader-Callout2": "$(callouts.callout3.response.body.headers['H3-C1-Method'])",
							"ShowRespHeader-Callout1": "$(callouts.callout1.response.body.headers['H1-C2-Method'])"
						}
					}
				}
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"fields": {
						"config": {
							"callouts": "circular dependency detected"
						}
					},
					"name": "schema violation",
					"code": 2,
					"message": "schema violation (config.callouts: circular dependency detected)"
				}
			}
		},
		{
			"scenarioName": "duplicated callout names",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET"
						}
					},
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/POST",
							"method": "POST"
						}
					}
				],
				"upstream": {
					"headers": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))"
						}
					}
				}
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"fields": {
						"config": {
							"callouts": "callout callout1 already exists"
						}
					},
					"name": "schema violation",
					"message": "schema violation (config.callouts: callout callout1 already exists)",
					"code": 2
				}
			}
		},
		{
			"scenarioName": "cache.strategy is null",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/uuid",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"cache": {
					"strategy": null
				},
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))",
							"Callout1-Uuid": "$(callouts.callout1.response.body.uuid)"
						}
					}
				}
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"fields": {
						"config": {
							"cache": {
								"strategy": "required field missing"
							}
						}
					},
					"name": "schema violation",
					"message": "schema violation (config.cache: {\n  strategy = \"required field missing\"\n})",
					"code": 2
				}
			}
		},
		{
			"scenarioName": "cache.strategy is invalid",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/uuid",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"cache": {
					"strategy": "abc"
				},
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))",
							"Callout1-Uuid": "$(callouts.callout1.response.body.uuid)"
						}
					}
				}
			},
			"pluginConfig_res": {
				"statusCode": 400,
				"body": {
					"fields": {
						"config": {
							"cache": {
								"strategy": "expected one of: memory, redis, off"
							}
						}
					},
					"name": "schema violation",
					"message": "schema violation (config.cache: {\n  strategy = \"expected one of: memory, redis, off\"\n})",
					"code": 2
				}
			}
		}
	],
	"testCacheSuite": [
		{
			"scenarioName": "cache.strategy: off",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/uuid",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))",
							"Callout1-Uuid": "$(callouts.callout1.response.body.uuid)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Uuid": "<plache_holder>",
						"Callout-Body-Type": "table",
						"Callout-Status": "200"
					}
				}
			}
		},
		{
			"scenarioName": "cache.strategy: memory, callouts.bypass - false by default",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/uuid",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"cache": {
					"strategy": "memory"
				},
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))",
							"Callout1-Uuid": "$(callouts.callout1.response.body.uuid)",
							"Callout1-strategy": "memory"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Uuid": "<plache_holder>",
						"Callout-Body-Type": "table",
						"Callout-Status": "200",
						"Callout1-strategy": "memory"
					}
				}
			}
		},
		{
			"scenarioName": "cache.strategy: memory, callouts.bypass - true updated",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/uuid",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"cache": {
					"strategy": "memory"
				},
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))",
							"Callout1-Uuid": "$(callouts.callout1.response.body.uuid)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Uuid": "<plache_holder>",
						"Callout-Body-Type": "table",
						"Callout-Status": "200"
					}
				}
			}
		},
		{
			"scenarioName": "cache.strategy: redis, callouts.bypass - false updated",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": false
						},
						"request": {
							"url": "http://httpbin/uuid",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"cache": {
					"strategy": "redis",
					"redis": {
						"port": 6379,
						"username": "redisuser",
						"host": "redis",
						"password": "redispassword"
					}
				},
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Body-Type": "$(type(callouts.callout1.response.body))",
							"Callout1-Uuid": "$(callouts.callout1.response.body.uuid)",
							"Callout1-strategy": "redis"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Uuid": "<plache_holder>",
						"Callout-Body-Type": "table",
						"Callout-Status": "200",
						"Callout1-strategy": "redis"
					}
				}
			}
		}
	],
	"testCoreSuite": [
		{
			"scenarioName": "upstream, callouts - dynamic(by vaults)",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "{vault://my-env-vault/URL2}",
							"method": "GET",
							"http_opts": {
								"ssl_verify": false,
								"proxy": {
									"auth_password": "{vault://my-env-vault/PROXY_PASSWORD}",
									"auth_username": "{vault://my-env-vault/PROXY_USER}",
									"http_proxy": "http://squid:3128"
								}
							},
							"query": {
								"custom": {
									"Q1": "{vault://my-env-vault/QUERY1}"
								}
							},
							"headers": {
								"custom": {
									"H1": "{vault://my-env-vault/HEADERS1}"
								}
							},
							"body": {
								"custom": {
									"B1": "{vault://my-env-vault/BODY1}"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout2",
						"depends_on": [
							"callout1"
						],
						"request": {
							"url": "{vault://my-env-vault/URL1}",
							"method": "GET",
							"query": {
								"custom": {
									"Q2": "{vault://my-env-vault/QUERY2}"
								}
							},
							"headers": {
								"custom": {
									"H2": "{vault://my-env-vault/HEADERS2}"
								}
							},
							"body": {
								"custom": {
									"B2": "{vault://my-env-vault/BODY2}"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json",
							"H1": "$(callouts.callout1.response.body.headers.H1)",
							"H2": "$(callouts.callout2.response.body.headers.H2)",
							"Up-H1": "{vault://my-env-vault/HEADERS1}"
						}
					},
					"query": {
						"forward": false,
						"custom": {
							"Q1": "$(callouts.callout1.response.body.args.Q1)",
							"Q2": "$(callouts.callout2.response.body.args.Q2)",
							"Up-Q1": "{vault://my-env-vault/QUERY1}",
							"test": "$(callouts.callout1.response.body.args.test)",
							"id": "$(callouts.callout1.response.body.args.id)"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))",
							"B1": "$(callouts.callout1.response.body.json.B1)",
							"B2": "$(callouts.callout2.response.body.json.B2)",
							"Up-B1": "{vault://my-env-vault/BODY1}"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"args": {
						"Q1": "q1_value_12345",
						"Q2": "q2_value_12345",
						"Up-Q1": "q1_value_12345",
						"id": "789",
						"test": "abc123456"
					},
					"headers": {
						"H1": "h1_value",
						"H2": "h2_value"
					},
					"json": {
						"B1": "body1_value_67890",
						"B2": "body2_value_67890",
						"ShowRespBody-Type-Callout1": "table",
						"ShowRespStatus-Callout1": "200",
						"Up-B1": "body1_value_67890"
					}
				}
			}
		},
		{
			"scenarioName": "upstream - dynamic(by lua expression, pdk, by_lua)",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"query": {
								"custom": {
									"Q1": "data_Q1",
									"Q2": "data_Q2"
								}
							},
							"headers": {
								"custom": {
									"H1": "data_H1",
									"H2": "data_H2",
									"H3": "data_H3"
								}
							},
							"body": {
								"custom": {
									"B1": "data_B1",
									"B2": "data_B2"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json",
							"Up-H1": "Up_Data_H1",
							"Up-H2": "$(callouts.callout1.response.body.headers['H1'])",
							"Up-H3": "$(kong.ctx.shared.callouts.callout1.response.body.headers['H2'])"
						}
					},
					"query": {
						"forward": false,
						"custom": {
							"Up-Q1": "Up_Data_Q1",
							"Up-Q2": "$(callouts.callout1.response.body.args['Q1'])",
							"Up-Q3": "$(kong.ctx.shared.callouts.callout1.response.body.args['Q2'])"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"Up-B1": "Up_Data_B1",
							"Up-B2": "$(callouts.callout1.response.body.json['B1'])",
							"Up-B3": "$(kong.ctx.shared.callouts.callout1.response.body.json['B2'])"
						}
					},
					"by_lua": "kong.service.request.add_header('Up-H4',kong.ctx.shared.callouts.callout1.response.body.headers['H3'])"
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"headers": {
						"Content-Type": "application/json",
						"Up-H1": "Up_Data_H1",
						"Up-H2": "data_H1",
						"Up-H3": "data_H2",
						"Up-H4": "data_H3"
					},
					"args": {
						"Up-Q1": "Up_Data_Q1",
						"Up-Q2": "data_Q1",
						"Up-Q3": "data_Q2"
					},
					"json": {
						"ShowRespStatus-Callout1": "200",
						"Up-B1": "Up_Data_B1",
						"Up-B2": "data_B1",
						"Up-B3": "data_B2"
					}
				}
			}
		},
		{
			"scenarioName": "add/update/delete upstream.headers, upstream.query, upstream.body(forward: true)",
			"description": "Also cover KAG-6529: [request-callout plugin] Failed to delete keys in original requests",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST"
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": true,
						"custom": {
							"H1": "Up_Data_H1_forward",
							"H2": null
						}
					},
					"query": {
						"forward": true,
						"custom": {
							"Q1": "Up_Data_Q1_forward",
							"Q2": null
						}
					},
					"body": {
						"forward": true,
						"custom": {
							"B1": "Up_Data_B1_forward",
							"B2": null,
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"H0": "value in headers - 0",
					"H1": "value in headers - 1",
					"H2": "value in headers - 2"
				},
				"params": {
					"Q0": "value in query - 0",
					"Q1": "value in query - 1",
					"Q2": "value in query - 2"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"args": {
						"Q0": "value in query - 0",
						"Q1": "Up_Data_Q1_forward",
						"Q2": "null"
					},
					"headers": {
						"H0": "value in headers - 0",
						"H1": "Up_Data_H1_forward",
						"H2": "null"
					},
					"json": {
						"B0": "value in body - 0",
						"B1": "Up_Data_B1_forward",
						"B2": "null",
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "add/update/delete upstream.headers, upstream.query, upstream.body(forward: false)",
			"description": "Also cover KAG-6529: [request-callout plugin] Failed to delete keys in original requests",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST"
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json",
							"H1": "Up_Data_H1_forward_false",
							"H2": null
						}
					},
					"query": {
						"forward": false,
						"custom": {
							"Q1": "Up_Data_Q1_forward_false",
							"Q2": null
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"B1": "Up_Data_B1_forward_false",
							"B2": null,
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"H0": "value in headers - 0",
					"H1": "value in headers - 1",
					"H2": "value in headers - 2"
				},
				"params": {
					"Q0": "value in query - 0",
					"Q1": "value in query - 1",
					"Q2": "value in query - 2"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"args": {
						"Q0": "null",
						"Q1": "Up_Data_Q1_forward_false",
						"Q2": "null"
					},
					"headers": {
						"H0": "null",
						"H1": "Up_Data_H1_forward_false",
						"H2": "null"
					},
					"json": {
						"B0": "null",
						"B1": "Up_Data_B1_forward_false",
						"B2": "null",
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts - dynamic(by lua expression, pdk, by_lua)",
			"description": "Also cover KAG-6821: Request Callout plugin failed to store callout response in ctx to be used in `response.by_lua`",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"query": {
								"custom": {
									"Q1": "Q_value1",
									"Q2": "Q_value2",
									"Q3": "$(kong.request.get_body().B0)"
								}
							},
							"headers": {
								"custom": {
									"H1": "H_value1",
									"H2": "H_value2",
									"H3": "$(kong.ctx.shared.callouts.callout1.caching.strategy)"
								}
							},
							"body": {
								"custom": {
									"B1": "B_value1",
									"B2": "B_value2",
									"B3": "$(kong.ctx.shared.callouts.callout1.caching.strategy)",
									"B4": "$(kong.client.get_protocol())"
								}
							},
							"by_lua": "kong.ctx.shared.callouts.callout1.request.params.query.Q2='abcdefg';kong.ctx.shared.callouts.callout1.request.params.query.Q4='Q_value4444'"
						},
						"response": {
							"body": {
								"decode": true
							},
							"by_lua": "kong.ctx.shared.callouts.callout1.caching.strategy='memory'"
						}
					},
					{
						"name": "callout2",
						"depends_on": [
							"callout1"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"query": {
								"custom": {
									"C2-Q": "$(callouts.callout1.response.body.args.Q2)"
								}
							},
							"headers": {
								"custom": {
									"C2-H": "$(callouts.callout1.response.body.headers.H2)"
								}
							},
							"body": {
								"custom": {
									"C2-B": "$(callouts.callout1.response.body.json.B2)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							},
							"by_lua": "kong.ctx.shared.callouts.callout2.response.body.url='http://test.com';kong.ctx.shared.callouts.callout2.response.body.test='123456789'"
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"C1-body-B1": "$(callouts.callout1.response.body.json['B1'])",
							"C1-body-B2": "$(callouts.callout1.response.body.json['B2'])",
							"C1-body-B3": "$(callouts.callout1.response.body.json['B3'])",
							"C1-body-B4": "$(callouts.callout1.response.body.json['B4'])",
							"C1-strategy": "$(kong.ctx.shared.callouts.callout1.caching.strategy)",
							"C1-query-Q1": "$(callouts.callout1.response.body.args['Q1'])",
							"C1-query-Q2": "$(callouts.callout1.response.body.args['Q2'])",
							"C1-query-Q3": "$(callouts.callout1.response.body.args['Q3'])",
							"C1-headers-H1": "$(callouts.callout1.response.body.headers['H1'])",
							"C1-headers-H2": "$(callouts.callout1.response.body.headers['H2'])",
							"C1-headers-H3": "$(callouts.callout1.response.body.headers['H3'])",
							"C2-body-B": "$(callouts.callout2.response.body.json['C2-B'])",
							"C2-query-Q": "$(callouts.callout2.response.body.args['C2-Q'])",
							"C2-headers-H": "$(callouts.callout2.response.body.headers['C2-H'])",
							"C2_RES_BODY_URL": "$(callouts.callout2.response.body.url)",
							"C2_RES_BODY_TEST": "$(callouts.callout2.response.body.test)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"C1-body-B1": "B_value1",
						"C1-body-B2": "B_value2",
						"C1-body-B3": "off",
						"C1-body-B4": "http",
						"C1-headers-H1": "H_value1",
						"C1-headers-H2": "H_value2",
						"C1-headers-H3": "off",
						"C1-query-Q1": "Q_value1",
						"C1-query-Q2": "abcdefg",
						"C1-query-Q3": "value in body - 0",
						"C1-strategy": "memory",
						"C2-body-B": "B_value2",
						"C2-headers-H": "H_value2",
						"C2-query-Q": "abcdefg",
						"C2_RES_BODY_URL": "http://test.com",
						"C2_RES_BODY_TEST": "123456789"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.response.body.store: false, callouts.response.header.store: false",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET"
						},
						"response": {
							"headers": {
								"store": false
							},
							"body": {
								"store": false
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowResp-Callout1": "$(callouts.callout1.response.body)",
							"ShowRespHeaders-Callout1": "$(callouts.callout1.response.headers)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200",
						"ShowRespHeaders-Callout1": "",
						"ShowResp-Callout1": ""
					}
				}
			}
		},
		{
			"scenarioName": "callouts.response.body.store: true, callouts.response.header.store: true, url with query strings",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/anything?id=123",
							"method": "GET"
						},
						"response": {
							"headers": {
								"store": true
							},
							"body": {
								"store": true,
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowResp-Callout1": "$(callouts.callout1.response.body.args['id'])",
							"ShowRespHeaders-Content-Type-Callout1": "$(callouts.callout1.response.headers['Content-Type'])"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowResp-Callout1": "123",
						"ShowRespHeaders-Content-Type-Callout1": "application/json",
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.response.body.store: true, callouts.response.header.store: true, url with query strings, and request with same query strings",
			"description": "Cover KAG-6575: [request-callout plugin]Query strings in callouts.request.url should be updated instead of adding duplicated one",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/anything?id=123",
							"method": "GET"
						},
						"response": {
							"headers": {
								"store": true
							},
							"body": {
								"store": true,
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowResp-Callout1": "$(callouts.callout1.response.body.args['id'])",
							"ShowRespHeaders-Content-Type-Callout1": "$(callouts.callout1.response.headers['Content-Type'])"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"id": "456"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200",
						"ShowResp-Callout1": "123",
						"ShowRespHeaders-Content-Type-Callout1": "application/json"
					}
				}
			}
		},
		{
			"scenarioName": "add/update/delete callouts.headers, callouts.query, callouts.body(forward: false - default, true - updated)",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"query": {
								"custom": {
									"Q1": "data_Q",
									"Q2": null
								}
							},
							"headers": {
								"custom": {
									"H1": "data_H",
									"H2": null
								}
							},
							"body": {
								"custom": {
									"B1": "data_B",
									"B2": null
								}
							}
						}
					},
					{
						"name": "callout2",
						"depends_on": [
							"callout1"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"query": {
								"forward": true,
								"custom": {
									"Q1": "data_Q",
									"Q2": null
								}
							},
							"headers": {
								"forward": true,
								"custom": {
									"H1": "data_H",
									"H2": null
								}
							},
							"body": {
								"forward": true,
								"custom": {
									"B1": "data_B",
									"B2": null
								}
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))",
							"ShowRespBody-Callout1": "$(callouts.callout1.response.body)",
							"ShowRespStatus-Callout2": "$(callouts.callout2.response.status)",
							"ShowRespBody-Type-Callout2": "$(type(callouts.callout2.response.body))",
							"ShowRespBody-Callout2": "$(callouts.callout2.response.body)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"H0": "value in headers - 0",
					"H1": "value in headers - 1",
					"H2": "value in headers - 2"
				},
				"params": {
					"Q0": "value in query - 0",
					"Q1": "value in query - 1",
					"Q2": "value in query - 2"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespBody-Callout1": {
							"args": {
								"Q0": "null",
								"Q1": "data_Q",
								"Q2": "null"
							},
							"headers": {
								"H0": "null",
								"H1": "data_H",
								"H2": "null"
							},
							"json": {
								"B0": "null",
								"B1": "data_B",
								"B2": "null"
							}
						},
						"ShowRespBody-Type-Callout1": "string",
						"ShowRespStatus-Callout1": "200",
						"ShowRespBody-Callout2": {
							"args": {
								"Q0": "value in query - 0",
								"Q1": "data_Q",
								"Q2": "null"
							},
							"headers": {
								"H0": "value in headers - 0",
								"H1": "data_H",
								"H2": "null"
							},
							"json": {
								"B0": "value in body - 0",
								"B1": "data_B",
								"B2": "null"
							}
						},
						"ShowRespBody-Type-Callout2": "string",
						"ShowRespStatus-Callout2": "200"
					}
				}
			}
		},
		{
			"scenarioName": "3 callouts use 'depends_on' - squential",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"depends_on": [
							"callout2"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"headers": {
								"custom": {
									"H1-C2-Method": "$(callouts.callout2.response.body.method)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout2",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout3",
						"depends_on": [
							"callout1"
						],
						"request": {
							"url": "http://httpbin/anything",
							"method": "PUT",
							"headers": {
								"custom": {
									"H3-C1-Method": "$(callouts.callout1.response.body.method)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespStatus-Callout2": "$(callouts.callout2.response.status)",
							"ShowRespStatus-Callout3": "$(callouts.callout3.response.status)",
							"ShowRespHeader-Callout2": "$(callouts.callout3.response.body.headers['H3-C1-Method'])",
							"ShowRespHeader-Callout1": "$(callouts.callout1.response.body.headers['H1-C2-Method'])"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespHeader-Callout1": "POST",
						"ShowRespHeader-Callout2": "GET",
						"ShowRespStatus-Callout1": "200",
						"ShowRespStatus-Callout2": "200",
						"ShowRespStatus-Callout3": "200"
					}
				}
			}
		},
		{
			"scenarioName": "3 callouts without 'depends_on' ",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout2",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"headers": {
								"custom": {
									"H2-C1-Method": "$(callouts.callout1.response.body.method)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					},
					{
						"name": "callout3",
						"request": {
							"url": "http://httpbin/anything",
							"method": "PUT",
							"headers": {
								"custom": {
									"H3-C2-Method": "$(callouts.callout2.response.body.method)"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowStatus-Callout2": "$(callouts.callout2.response.status)",
							"ShowStatus-Callout3": "$(callouts.callout3.response.status)",
							"ShowHeaders-Callout2": "$(callouts.callout2.response.body.headers['H2-C1-Method'])",
							"ShowHeaders-Callout3": "$(callouts.callout3.response.body.headers['H3-C2-Method'])"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowHeaders-Callout2": "GET",
						"ShowHeaders-Callout3": "POST",
						"ShowStatus-Callout1": "200",
						"ShowStatus-Callout2": "200",
						"ShowStatus-Callout3": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.url is https url",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "https://http-log-server:9343/logs",
							"method": "GET"
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.url is https url(2 ssl server names; content-type is 'application/json; charset=UTF-8')",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "https://caddy:445/json",
							"method": "GET",
							"http_opts": {
								"ssl_verify": false
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"body": {
						"forward": false,
						"custom": {
							"ShowStatus-Callout1": "$(callouts.callout1.response.status)",
							"Callout1-Body-Response": "$(callouts.callout1.response.body.response)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowStatus-Callout1": "200",
						"Callout1-Body-Response": "test_json"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.url returns xml data",
			"pluginConfig": {
				"callouts": [
					{
						"cache": {
							"bypass": false
						},
						"name": "callout1",
						"request": {
							"url": "http://httpbin/xml",
							"method": "GET",
							"headers": {
								"forward": true,
								"custom": {
									"H1": "hv1",
									"H2": "hv2"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				]
			},
			"request": {
				"method": "GET",
				"url": "<plache_holder>",
				"validateStatus": null
			},
			"res": {
				"statusCode": 400
			},
			"logs": {
				"errorMessage": "callout callout1 request errored: no decoder found for content-type application/xml"
			}
		},
		{
			"scenarioName": "callouts.request.method: get, post, put, delete, patch",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything/get",
							"method": "GET"
						}
					},
					{
						"name": "callout2",
						"depends_on": [
							"callout1"
						],
						"request": {
							"url": "http://httpbin/post",
							"method": "POST"
						}
					},
					{
						"name": "callout3",
						"depends_on": [
							"callout2"
						],
						"request": {
							"url": "http://httpbin/put",
							"method": "PUT"
						}
					},
					{
						"name": "callout4",
						"depends_on": [
							"callout3"
						],
						"request": {
							"url": "http://httpbin/delete",
							"method": "DELETE"
						}
					},
					{
						"name": "callout5",
						"depends_on": [
							"callout4"
						],
						"request": {
							"url": "http://httpbin/patch",
							"method": "PATCH"
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespStatus-Callout2": "$(callouts.callout2.response.status)",
							"ShowRespStatus-Callout3": "$(callouts.callout3.response.status)",
							"ShowRespStatus-Callout4": "$(callouts.callout4.response.status)",
							"ShowRespStatus-Callout5": "$(callouts.callout5.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200",
						"ShowRespStatus-Callout2": "200",
						"ShowRespStatus-Callout3": "200",
						"ShowRespStatus-Callout4": "200",
						"ShowRespStatus-Callout5": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.http_proxy - valid username and password",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"http_opts": {
								"proxy": {
									"auth_password": "password1",
									"auth_username": "user1",
									"http_proxy": "http://squid:3128"
								}
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.http_proxy - invalid username and password",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"http_opts": {
								"proxy": {
									"auth_password": "123456789",
									"auth_username": "user1",
									"http_proxy": "http://squid:3128"
								}
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "407"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.https_proxy - valid username and password",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "https://http-log-server:9343/logs",
							"method": "GET",
							"http_opts": {
								"proxy": {
									"auth_password": "password1",
									"auth_username": "user1",
									"https_proxy": "http://squid:3128"
								}
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.https_proxy - invalid username and password",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "https://http-log-server:9343/logs",
							"method": "GET",
							"error": {
								"on_error": "fail",
								"retries": 2,
								"http_statuses": [
									407
								],
								"error_response_msg": "{\"message\": \"Hi! This is an error from callout1.\"}",
								"error_response_code": 407
							},
							"http_opts": {
								"proxy": {
									"auth_password": "123456",
									"auth_username": "abcdefg",
									"https_proxy": "http://squid:3128"
								}
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 407,
				"body": {
					"message": "Hi! This is an error from callout1."
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.timeouts.connect - small",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://1.1.1.1:81",
							"method": "GET",
							"http_opts": {
								"ssl_server_name": null,
								"timeouts": {
									"connect": 1,
									"write": 10000,
									"read": 100000
								},
								"ssl_verify": false,
								"proxy": {}
							},
							"error": {
								"on_error": "continue",
								"retries": 2,
								"http_statuses": null,
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespBody-Type-Callout1": "nil",
						"ShowRespStatus-Callout1": ""
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.timeouts.send - small",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"body": {
								"forward": true,
								"custom": {
									"f1": "$(('a'):rep(1e7))"
								}
							},
							"http_opts": {
								"ssl_server_name": null,
								"timeouts": {
									"connect": 10000,
									"write": 1,
									"read": 100000
								},
								"ssl_verify": false,
								"proxy": {}
							},
							"error": {
								"on_error": "continue",
								"retries": 2,
								"http_statuses": null,
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowStatus-Callout1-send": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1-send": "$(type(callouts.callout1.response.body))"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespBody-Type-Callout1-send": "nil",
						"ShowStatus-Callout1-send": ""
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.timeouts.send/read/connect - large",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"body": {
								"forward": true,
								"custom": {
									"f1": "$(('a'):rep(1e7))"
								}
							},
							"http_opts": {
								"ssl_server_name": null,
								"timeouts": {
									"connect": 10000,
									"write": 10000,
									"read": 10000
								},
								"ssl_verify": false
							},
							"error": {
								"on_error": "continue",
								"retries": 2,
								"http_statuses": null,
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.timeouts.read - small",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"body": {
								"forward": true,
								"custom": {
									"f1": "$(('a'):rep(1e7))"
								}
							},
							"http_opts": {
								"ssl_server_name": null,
								"timeouts": {
									"connect": 10000,
									"write": 10000,
									"read": 1
								},
								"ssl_verify": false,
								"proxy": {}
							},
							"error": {
								"on_error": "continue",
								"retries": 2,
								"http_statuses": null,
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"H0": "value in headers - 0",
					"H1": "value in headers - 1"
				},
				"params": {
					"Q0": "value in query - 0",
					"Q1": "value in query - 1"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespBody-Type-Callout1": "nil",
						"ShowRespStatus-Callout1": ""
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.ssl_verify - true",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "https://caddy:445/json",
							"method": "GET",
							"http_opts": {
								"ssl_verify": true
							},
							"error": {
								"on_error": "fail",
								"retries": 2,
								"http_statuses": [
									403
								],
								"error_response_msg": "{\"message\": \"Hi! This is an error from callout1.\"}",
								"error_response_code": 401
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 401,
				"body": {
					"message": "Hi! This is an error from callout1."
				}
			}
		},
		{
			"scenarioName": "callouts.request.http_opts.ssl_server_name - added",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "https://caddy:445/json",
							"method": "GET",
							"http_opts": {
								"ssl_verify": false,
								"ssl_server_name": "localhost"
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"body": {
						"forward": false,
						"custom": {
							"ShowStatus-Callout1": "$(callouts.callout1.response.status)",
							"Callout1-Body-Response": "$(callouts.callout1.response.body.response)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Body-Response": "test_json",
						"ShowStatus-Callout1": "200"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.errors.http_statuses is 403, and callouts also get 403 status",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/status/403",
							"method": "GET",
							"error": {
								"on_error": "fail",
								"retries": 2,
								"http_statuses": [
									403
								],
								"error_response_msg": "{\"message\": \"This is an error from callout1. cache.strategy: $(kong.ctx.shared.callouts.callout1.caching.strategy)\"}",
								"error_response_code": 401
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))",
							"ShowRespBody-Callout1": "$(callouts.callout1.response.body)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 401,
				"body": {
					"message": "This is an error from callout1. cache.strategy: off"
				}
			}
		},
		{
			"scenarioName": "callouts.request.errors.http_statuses is 403, and callouts also get 500 status",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/status/500",
							"method": "GET",
							"error": {
								"on_error": "fail",
								"retries": 2,
								"http_statuses": [
									403
								],
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))",
							"ShowRespBody-Callout1": "$(callouts.callout1.response.body)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "500"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.errors.http_statuses is 403, and callouts also get 403 status, on_error: retry",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/status/403",
							"method": "GET",
							"error": {
								"on_error": "retry",
								"retries": 2,
								"http_statuses": [
									403
								],
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"decode": true,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 401,
				"body": {
					"message": "This is an error from callout1"
				}
			}
		},
		{
			"scenarioName": "callouts.request.errors.http_statuses is 403, and callouts also get 403 status, on_error: continue",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/status/403",
							"method": "GET",
							"error": {
								"on_error": "continue",
								"retries": 2,
								"http_statuses": [
									403
								],
								"error_response_msg": "{\"message\": \"This is an error from callout1\"}",
								"error_response_code": 401
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"decode": true,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespBody-Type-Callout1": "$(type(callouts.callout1.response.body))"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "403"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.body.custom is null, callouts.request.headers.forward is true(request.method is GET in the client)",
			"description": "Cover KAG-6676 and KAG-6770",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "POST",
							"query": {
								"forward": true,
								"custom": null
							},
							"headers": {
								"forward": true,
								"custom": null
							},
							"body": {
								"forward": false,
								"custom": null
							}
						},
						"response": {
							"body": {
								"store": true,
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": true,
						"custom": {
							"Show-Resp-Status-Callout1": "$(callouts.callout1.response.status)",
							"Show-Resp-Method-Callout1": "$(callouts.callout1.response.body.method)"
						}
					},
					"body": {
						"forward": false,
						"custom": null
					}
				}
			},
			"request": {
				"method": "GET",
				"url": "<plache_holder>",
				"validateStatus": null
			},
			"res": {
				"statusCode": 200,
				"body": {
					"headers": {
						"Show-Resp-Status-Callout1": "200",
						"Show-Resp-Method-Callout1": "POST"
					},
					"json": null
				}
			}
		},
		{
			"scenarioName": "callouts.request.body.custom is null, callouts.request.headers.forward is true(request.method is POST, and request.payload is set in the client)",
			"description": "Cover KAG-6676: [request-callout plugin] Failed to use the plugin when callouts.request.body.custom is null and callouts.request.headers.forward is true",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"query": {
								"forward": true,
								"custom": null
							},
							"headers": {
								"forward": true,
								"custom": null
							},
							"body": {
								"forward": false,
								"custom": null
							}
						},
						"response": {
							"body": {
								"store": true,
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": true,
						"custom": {
							"Show-Resp-Status-Callout1": "$(callouts.callout1.response.status)",
							"Show-Resp-Method-Callout1": "$(callouts.callout1.response.body.method)"
						}
					},
					"body": {
						"forward": false,
						"custom": null
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"Content-Type": "application/json",
					"Myheaders": "Hi_my_headers"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"headers": {
						"Show-Resp-Status-Callout1": "200",
						"Show-Resp-Method-Callout1": "GET",
						"Myheaders": "Hi_my_headers"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.body.custom is set(request.method is GET in the client)",
			"description": "Cover KAG-6765: [request-callout]It is recommended that users can still use upstream.body.custom when request.body is not configured in the client",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "DELETE"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Method": "$(callouts.callout1.response.body.method)"
						}
					}
				}
			},
			"request": {
				"method": "GET",
				"url": "<plache_holder>",
				"validateStatus": null
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout-Status": "200",
						"Callout-Method": "DELETE"
					}
				}
			}
		},
		{
			"scenarioName": "callouts.request.body.custom is set(request.method is POST, request.payload in the client)",
			"description": "Cover KAG-6765: [request-callout]It is recommended that users can still use upstream.body.custom when request.body is not configured in the client",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "PUT"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"body": {
						"custom": {
							"Callout-Status": "$(callouts.callout1.response.status)",
							"Callout-Method": "$(callouts.callout1.response.body.method)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"Content-Type": "application/json"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout-Status": "200",
						"Callout-Method": "PUT",
						"B0": "value in body - 0",
						"B1": "value in body - 1",
						"B2": "value in body - 2"
					}
				}
			}
		},
		{
			"scenarioName": "upstream.headers.forward is false(request.method is GET)",
			"description": "Cover KAG-6749: [request-callout]It’s better to inform users that they need to set the ‘content-type’ when they have configured upstream.headers.forward=false",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"headers": {
								"forward": false,
								"custom": {
									"H1": "header1"
								}
							},
							"body": {
								"forward": true,
								"custom": {
									"B1": "body1"
								}
							}
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"H1": "h1"
						}
					},
					"body": {
						"forward": true,
						"custom": {
							"Callout1-Headers-H1": "$(callouts.callout1.response.body.headers.H1)",
							"Callout1-Body-B1": "$(callouts.callout1.response.body.json.B1)"
						}
					}
				}
			},
			"request": {
				"method": "GET",
				"url": "<plache_holder>",
				"validateStatus": null
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Body-B1": "body1",
						"Callout1-Headers-H1": "header1"
					}
				}
			}
		},
		{
			"scenarioName": "upstream.headers.forward is false, and Content-Type is set in upstream.headers(request.method is POST, request.payload in the client)",
			"description": "Cover KAG-6858: [request-callout]Should not return an error when upstream.body.custom is set and upstream.headers is { \"forward\": false, \"custom\": { \"Content-Type\": \"application/json\" } }",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"request": {
							"url": "http://httpbin/anything",
							"method": "DELETE"
						},
						"response": {
							"body": {
								"decode": true
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"custom": {
							"Callout1-Status": "$(callouts.callout1.response.status)",
							"Callout1-Method": "$(callouts.callout1.response.body.method)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"Content-Type": "application/json"
				},
				"data": {
					"B1": "value in body - 1"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"Callout1-Status": "200",
						"Callout1-Method": "DELETE",
						"B1": "value in body - 1"
					}
				}
			}
		},
		{
			"scenarioName": "configure with consumer",
			"pluginConfig": {
				"callouts": [
					{
						"name": "callout1",
						"cache": {
							"bypass": true
						},
						"request": {
							"url": "http://httpbin/anything",
							"method": "GET",
							"http_opts": {},
							"headers": {
								"forward": false,
								"custom": {
									"Content-Type": "application/json"
								}
							}
						}
					}
				],
				"upstream": {
					"headers": {
						"forward": false,
						"custom": {
							"Content-Type": "application/json"
						}
					},
					"body": {
						"forward": false,
						"custom": {
							"ShowRespStatus-Callout1": "$(callouts.callout1.response.status)",
							"ShowRespConsumer": "$(kong.client.get_consumer().username)"
						}
					}
				}
			},
			"request": {
				"method": "POST",
				"url": "<plache_holder>",
				"validateStatus": null,
				"headers": {
					"apikey": "top-secret-key"
				},
				"data": {
					"B0": "value in body - 0",
					"B1": "value in body - 1",
					"B2": "value in body - 2"
				}
			},
			"res": {
				"statusCode": 200,
				"body": {
					"json": {
						"ShowRespStatus-Callout1": "200"
					}
				}
			}
		}
	]
}